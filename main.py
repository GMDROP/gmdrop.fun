from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InputMediaPhoto, InputMediaVideo
from aiogram import Bot, Dispatcher, types, executor
from aiogram.utils.markdown import escape_md
from aiogram.dispatcher import FSMContext

from datetime import datetime, timedelta
from math import ceil, floor
import logging
import sqlite3
import random


from config import BOT_TOKEN, ADMIN_IDS, MANAGER_IDS, PAGINATION_ACTIVE_LOTS, ADMIN_CHANNEL_ID, bot_username, \
    ORDERS_CHAT_LINK, ORDERS_CHANNEL_ID, MAIN_CHANNEL
import keyboards
import db

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

info_db = 'info.db'

with sqlite3.connect(info_db) as con:
    cursor = con.cursor()

    help_link_data = cursor.execute('SELECT text FROM help_link').fetchone()[0]
    help_text_data = cursor.execute('SELECT text FROM help_text').fetchone()[0]

    price_in_currency_UAH_data = cursor.execute('SELECT data FROM price_in_currency WHERE currency = ?', ('UAH',)).fetchone()[0]
    price_in_currency_RUB_data = cursor.execute('SELECT data FROM price_in_currency WHERE currency = ?', ('RUB',)).fetchone()[0]
    price_in_currency_USD_data = cursor.execute('SELECT data FROM price_in_currency WHERE currency = ?', ('USD',)).fetchone()[0]
    price_in_currency_G_data = cursor.execute('SELECT data FROM price_in_currency WHERE currency = ?', ('G',)).fetchone()[0]

    requisites_UAH_data = cursor.execute('SELECT data FROM requisites WHERE currency = ?', ('UAH',)).fetchone()[0]
    requisites_RUB_data = cursor.execute('SELECT data FROM requisites WHERE currency = ?', ('RUB',)).fetchone()[0]
    requisites_USD_data = cursor.execute('SELECT data FROM requisites WHERE currency = ?', ('USD',)).fetchone()[0]

help_link = help_link_data
help_text = help_text_data

price_in_currency = {
    'UAH': price_in_currency_UAH_data,
    'RUB': price_in_currency_RUB_data,
    'USD': price_in_currency_USD_data,
    'G': price_in_currency_G_data
}

requisites = {
    'UAH': requisites_UAH_data,

    'RUB': requisites_RUB_data,

    'USD': requisites_USD_data,
}

how_use_bot_text = '''
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è , –î—Ä—É–≥ üëãüèª

–†–∞–∑ —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç—É —Å—Ç–∞—Ç—å—é - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç , —á—Ç–æ —Ç—ã –Ω–µ —Å–æ–≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –ë–æ—Ç–æ–º, —Å–µ–π—á–∞—Å –≤—Å—ë –æ–±—ä—è—Å–Ω—é üòâ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-

–ö–ê–ö –ü–û–ü–û–õ–ù–ò–¢–¨ –ë–ê–õ–ê–ù–°

–ù–∞—á–Ω—ë–º? –¢–∞–∫, –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª.
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ YC, —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ , –∫–æ—Ç–æ—Ä–∞—è –ø–æ –∫—É—Ä—Å—É —Ä–∞–≤–Ω–∞
1 –≥—Ä–Ω - 1 YC
2 —Ä—É–± - 1 YC
–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –Ω–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ, –Ω–∞ –†—É—Å—Å–∫–∏–µ –∏ –Ω–∞ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã , –∞ —Ç–∞–∫ –∂–µ , –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ Tether $ !
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –∏–º–µ—é—Ç—Å—è YC
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-

–†–û–ó–´–ì–†–´–®–ò 

–î–∞–ª–µ–µ –º—ã –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–†–æ–∑—ã–≥—Ä—ã—à–∏¬ª, –≥–¥–µ —É –Ω–∞—Å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π , –∏ —Ç–∞–º —É–∂–µ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –Ω–∞—Å —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –Ω–µ–º —É—á–∞—Å—Ç–∏–µ ‚ú®

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Ä–∞–∑–Ω—ã–π 
–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:

-–ü—Ä–∏–∑–∞
-–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è 
-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 
-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —É—á–∞—Å—Ç–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
-–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è 
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-

–û—Ç–ª–∏—á–Ω–æ , –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å —Ç–µ–º –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö ‚úÖ


–£–†–û–í–ï–ù–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 

–û –£—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
–£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ,–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª, –µ—Å—Ç—å ¬´–£—Ä–æ–≤–µ–Ω—å¬ª –æ—Ç 1 –¥–æ 50.
–í —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –±—ã–≤–∞–µ—Ç —Ç–∞–∫ , —á—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä , —á—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ , —Ç—Ä–µ–±—É–µ—Ç—Å—è 2 - 5 –∏–ª–∏ 40 —É—Ä–æ–≤–µ–Ω—å , –∏ —Ç–¥ 
–ê –µ—â—ë , –æ—Ç –£—Ä–æ–≤–Ω—è –∑–∞–≤–∏—Å–∏—Ç —Ç–æ, –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ YC 

–û—Ç 1 –¥–æ 10 —É—Ä–æ–≤–Ω—è - 1 —Ä–∞–∑ –≤ 3 –¥–Ω—è 
–û—Ç 11 –¥–æ 25 —É—Ä–æ–≤–Ω—è - 1 —Ä–∞–∑ –≤ 2 –¥–Ω—è
–û—Ç 26 –¥–æ 49 —É—Ä–æ–≤–Ω—è - 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
–ê 50 —É—Ä–æ–≤–µ–Ω—å –¥–∞—ë—Ç –≤–∞–º –±–µ–∑–ª–∏–º–∏—Ç 
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-

–í–´–í–û–î YLION COINS –ù–ê –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò

–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∫ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å , —Ç–∞–∫ –∂–µ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –≤–∏–¥–µ –ø—Ä–∏–∑–∞ –∏–ª–∏ –ò–ª–∏–æ–Ω –ö–æ–∏–Ω–∞!

–ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ —Ç–∞–∫ –∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ü—Ä–æ—Ñ–∏–ª–µ!
-–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ 40 YC
-–í—ã–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –º—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –≤—ã—à–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –£–†–û–í–ù–ò
-–í—ã–≤–æ–¥ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ , –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —Ç–∞–∫ –∂–µ –≤ TETHER $
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-


–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê 

–£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–≤–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ , —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö , –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞—Ç—å –ü—Ä–∏–∑ –≤ –≤–∏–¥–µ 
2 YC 

–ù–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑, —Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–æ–±—ã –≤–∞—à –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º –Ω–∞ 40YC
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-


–ö–ê–ö –ü–û–ü–ê–°–¢–¨ –í –¢–û–ü 10

–í –¢–æ–ø 10 —É –Ω–∞—Å –µ—Å—Ç—å 3 —Ä–∞–∑–¥–µ–ª–∞ 

–¢–æ–ø 10 –ò–≥—Ä–æ–∫–æ–≤ –≤ –î—É—ç–ª–∏ 
–¢–æ–ø 10 –î–æ–Ω–∞—Ç–µ—Ä–æ–≤ 
–∏ 
–¢–æ–ø 10 –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤

–î–æ–Ω–∞—Ç–µ—Ä—ã —ç—Ç–æ —Ç–µ , –∫—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –ë–∞–ª–∞–Ω—Å.
–£—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ —Ç–µ , –∫—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö 
–ê –≤ –î—É—ç–ª—è—Ö —ç—Ç–æ –∏–≥—Ä–æ–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –≤ –î—É—ç–ª—è—Ö 
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-

–î—É–º–∞—é , –Ω–∞ —ç—Ç–æ–º –º—ã —Å —Ç–æ–±–æ–π —É–∂–µ –∏–º–µ–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º YLION GIVEAWAY ‚úÖ

–°–ø–∞—Å–∏–±–æ , —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è , –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –∏ —Ç–µ–±–µ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—Å—ë –æ–±—ä—è—Å–Ω—è—Ç –∏ –ø–æ–∫–∞–∂—É—Ç    '''

statistic_months = {
    1: '–Ø–Ω–≤–∞—Ä—è',
    2: '–§–µ–≤—Ä–∞–ª—è',
    3: '–ú–∞—Ä—Ç–∞',
    4: '–ê–ø—Ä–µ–ª—è',
    5: '–ú–∞—è',
    6: '–ò—é–Ω—è',
    7: '–ò—é–ª—è',
    8: '–ê–≤–≥—É—Å—Ç–∞',
    9: '–°–µ–Ω—Ç—è–±—Ä—è',
    10: '–û–∫—Ç—è–±—Ä—è',
    11: '–ù–æ—è–±—Ä—è',
    12: '–î–µ–∫–∞–±—Ä—è',
}


class UserWithdrawal(StatesGroup):
    get_bank_name = State()
    get_name = State()
    get_card = State()
    get_amount = State()
    get_currency = State()
    get_confirm = State()


class UserWithdrawalG(StatesGroup):
    get_amount = State()
    get_confirm = State()


class UserTopUp(StatesGroup):
    get_amount = State()
    get_currency = State()
    get_confirmation = State()


class UserWriteReview(StatesGroup):
    get_text = State()


class UserPromoCode(StatesGroup):
    name = State()


class UserDuelsRegistration(StatesGroup):
    st_id = State()
    game_mode = State()
    st_rank = State()
    bet = State()
    st_name = State()
    confirm = State()


class UserDuelTakePart(StatesGroup):
    st_id = State()
    st_rank = State()
    st_name = State()


class UserChangeYcToG(StatesGroup):
    amount = State()
    confirm = State()


class AdminCreateLot(StatesGroup):
    create_lot_name = State()
    create_lot_desc = State()
    create_lot_one_bid_price = State()
    create_lot_total_bids = State()
    create_lot_max_user_bets = State()
    create_lot_media = State()
    create_lot_need_level = State()

    winners_amount = State()

    want_add_automatic_prize = State()
    automatic_prize_amount = State()

    create_lot_confirm = State()


class AdminTopUp(StatesGroup):
    get_amount = State()


class AdminSetWinner(StatesGroup):
    get_id_or_username = State()
    confirm = State()


class AdminEditUserData(StatesGroup):
    get_user_id = State()
    balance = State()
    level = State()


class AdminEditBotData(StatesGroup):
    edit_requisites_type = State()
    edit_requisites_data = State()
    edit_in_currency_type = State()
    edit_in_currency_data = State()
    edit_help_link = State()
    edit_help_text = State()


class AdminMail(StatesGroup):
    get_data = State()
    confirm = State()


class AdminAddPromoCode(StatesGroup):
    promo_type = State()
    amount = State()
    name = State()
    activations = State()
    confirm = State()


class AdminEditPromo(StatesGroup):
    activations = State()
    amount = State()


class AdminDuelInfo(StatesGroup):
    duel_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@dp.message_handler(content_types=['text', 'photo', 'document', 'voice', 'video'], state='ban')
async def for_baned_users(message: types.Message, state: FSMContext):
    pass

@dp.callback_query_handler(lambda call: True, state='ban')
async def for_baned_users_callback(call: types.CallbackQuery, state: FSMContext):
    pass



# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞

@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_name)
async def create_lot_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    name = message.text

    await state.update_data(name=name)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', reply_markup=keyboards.cancel_keyboard)
    await AdminCreateLot.create_lot_desc.set()


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_desc)
async def create_lot_desc(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    desc = message.text

    await state.update_data(desc=desc)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è', reply_markup=keyboards.cancel_keyboard)
    await AdminCreateLot.create_lot_one_bid_price.set()


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_one_bid_price)
async def create_lot_one_bid_price(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        one_bid_price = int(message.text)
        if one_bid_price < 0:
            return await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –±–æ–ª—å—à–µ 0')

        await state.update_data(one_bid_price=one_bid_price)

        await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π', reply_markup=keyboards.cancel_keyboard)

        await AdminCreateLot.create_lot_total_bids.set()

    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 1')
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è')


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_total_bids)
async def create_lot_total_bids(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        total_bids = int(message.text)
        if total_bids < 1:
            return await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 1')

        await state.update_data(total_bids=total_bids)

        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboards.cancel_keyboard)

        await AdminCreateLot.create_lot_max_user_bets.set()

    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 1')
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π')


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_max_user_bets)
async def create_lot_max_user_bets(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        max_user_bets = int(message.text)
        if max_user_bets <= 0:
            return await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')

        await state.update_data(max_user_bets=max_user_bets)
        async with state.proxy() as data:
            data['files'] = []

        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=keyboards.cancel_keyboard)

        await AdminCreateLot.create_lot_media.set()

    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 1')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@dp.message_handler(content_types=['text', 'photo'], state=AdminCreateLot.create_lot_media)
async def create_lot_media(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            await state.finish()
            return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

        else:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')
        return 1

    elif message.content_type == 'photo':
        file_id = message.photo[0].file_id

        await state.update_data(photo=file_id)

        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50)', reply_markup=keyboards.cancel_keyboard)
        await AdminCreateLot.create_lot_need_level.set()


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_need_level)
async def create_lot_need_level(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        need_level = int(message.text)
        if need_level < 1 or need_level > 50:
            return await message.answer('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50')

        await state.update_data(need_level=need_level)

        await message.answer('–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?', reply_markup=keyboards.cancel_keyboard)
        await AdminCreateLot.winners_amount.set()

    except:
        return await message.answer('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50')


@dp.message_handler(content_types=['text'], state=AdminCreateLot.winners_amount)
async def create_lot_winners_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        winners_amount = int(message.text)

        await state.update_data(winners_amount=winners_amount)

        await message.answer('–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–∑ –≤ –º–æ–Ω–µ—Ç–∞—Ö?', reply_markup=keyboards.yes_or_no_keyboard)
        await AdminCreateLot.want_add_automatic_prize.set()

    except:
        return await message.answer('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ')



@dp.message_handler(content_types=['text'], state=AdminCreateLot.want_add_automatic_prize)
async def AdminCreateLot_want_add_automatic_prize(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text == '–î–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', reply_markup=keyboards.cancel_keyboard)
        await AdminCreateLot.automatic_prize_amount.set()

    elif message.text == '–ù–µ—Ç':
        await state.update_data(prize_amount=0)

        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=keyboards.confirm_keyboard)
        await AdminCreateLot.create_lot_confirm.set()

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.yes_or_no_keyboard)


@dp.message_handler(content_types=['text'], state=AdminCreateLot.automatic_prize_amount)
async def AdminCreateLot_automatic_prize_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        prize_amount = int(message.text)

        await state.update_data(prize_amount=prize_amount)

        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=keyboards.confirm_keyboard)
        await AdminCreateLot.create_lot_confirm.set()

    except:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—é —á–∏—Å–ª–æ–º', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=AdminCreateLot.create_lot_confirm)
async def create_lot_confirm(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ':
        data = await state.get_data()
        lot_id = message.message_id
        db.add_lot(lot_id, data['name'], data['desc'], data['one_bid_price'], data['total_bids'],
                   data['need_level'], data['photo'], data['max_user_bets'], data['prize_amount'], data['winners_amount'])

        await message.answer('–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', reply_markup=keyboards.main_keyboard)
        await message.answer('–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å', reply_markup=keyboards.admin_keyboard)

        mail_caption = f'''
{data['name']}

{data['desc']}

–£—Å–ø–µ–π –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ü§©‚ú®
        '''
        image = data['photo']

        await state.finish()

        keyboard = keyboards.lot_keyboard(lot_id, is_admin=False)

        all_users_ids = db.get_all_users_ids()
        for user_id in all_users_ids:
            try:
                await bot.send_photo(user_id, image, mail_caption, reply_markup=keyboard)
            except Exception as ex:
                pass
        await bot.send_photo(MAIN_CHANNEL, image, mail_caption + '\n@ylionbot',
                             reply_markup=keyboards.lot_channel_keyboard(lot_id))


    else:
        await state.finish()
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

@dp.message_handler(content_types=['text'], state=UserTopUp.get_amount)
async def TopUp_get_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        amount = int(message.text)

        if amount < 40:
            return await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è -- 40 –º–æ–Ω–µ—Ç')

        await state.update_data(amount=amount)

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É', reply_markup=keyboards.top_up_methods_keyboard)
        await UserTopUp.get_currency.set()

    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')


@dp.message_handler(content_types=['text'], state=UserTopUp.get_currency)
async def TopUp_get_currency(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    elif message.text in ['–£–ö–† üá∫üá¶ –ö–∞—Ä—Ç—ã:', 'RU üá∑üá∫ –ö–∞—Ä—Ç—ã:', 'TETHER $ ‚ÄúUSDT‚Äù']:
        if message.text == '–£–ö–† üá∫üá¶ –ö–∞—Ä—Ç—ã:':
            currency = 'UAH'
        elif message.text == 'RU üá∑üá∫ –ö–∞—Ä—Ç—ã:':
            currency = 'RUB'
        elif message.text == 'TETHER $ ‚ÄúUSDT‚Äù':
            currency = 'USD'

        data = await state.get_data()

        price = data['amount'] * float(price_in_currency[currency])

        await state.update_data(price=price, currency=currency)

        await message.answer(f'''
{requisites[currency]}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ {price} {currency} –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã—à–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥.
''', reply_markup=keyboards.cancel_keyboard)
        await UserTopUp.get_confirmation.set()

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.top_up_methods_keyboard)


@dp.message_handler(content_types=['text', 'photo', 'document'], state=UserTopUp.get_confirmation)
async def TopUp_get_confirmation(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            await state.finish()
            return await message.answer('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)
        else:
            return await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥.', reply_markup=keyboards.cancel_keyboard)

    elif message.content_type in ['photo', 'document']:
        data = await state.get_data()

        payment_id = message.message_id

        caption = f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db.get_user_full_name(message.chat.id)}
ID: {message.chat.id}
ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}
–°—É–º–º–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö: {data['amount']}
–°—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ: {data['price']} {data['currency']}
        '''

        keyboard = keyboards.admin_payment_keyboard(payment_id)

        if message.content_type == 'photo':
            file_id = message.photo[0].file_id
            m = await bot.send_photo(ADMIN_CHANNEL_ID, file_id, caption=caption, parse_mode='Markdown', reply_markup=keyboard)

        elif message.content_type == 'document':
            file_id = message.document.file_id
            m = await bot.send_document(ADMIN_CHANNEL_ID, file_id, caption=caption, parse_mode='Markdown', reply_markup=keyboard)

        db.add_payment(payment_id, message.chat.id, data['amount'], data['price'], data['currency'], file_id,
                       message.content_type, m.message_id)

        await message.answer('–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –í–∞—Å –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É', reply_markup=keyboards.main_keyboard)
        await state.finish()


# –í—ã–≤–æ–¥

@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_bank_name)
async def UserWithdrawal_get_bank_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    bank_name = message.text.strip()

    await state.update_data(bank_name=bank_name)

    await UserWithdrawal.get_name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
                         reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_name)
async def UserWithdrawal_get_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    name = message.text.strip()

    await state.update_data(name=name)

    await UserWithdrawal.get_card.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞',
                         reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_card)
async def UserWithdrawal_get_card(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    card = message.text.strip()

    await state.update_data(card=card)

    await UserWithdrawal.get_amount.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ YC',
                         reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_amount)
async def UserWithdrawal_get_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    try:
        yc_amount = int(message.text)
    except ValueError:
        return await message.answer('''
–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑
        ''',
                                    reply_markup=keyboards.cancel_keyboard)

    if yc_amount <= 0:
        return await message.answer('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    if yc_amount > db.get_user_balance(message.chat.id):
        return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    if yc_amount < 40:
        return await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ -- 40 YC. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑',
                                    reply_markup=keyboards.cancel_keyboard)

    await state.update_data(yc_amount=yc_amount)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞', reply_markup=keyboards.currencies_keyboard)
    await UserWithdrawal.get_currency.set()


@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_currency)
async def UserWithdrawal_get_currency(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    if message.text in ['UAH', 'RUB']:
        data = await state.get_data()

        currency = message.text.strip()

        in_currency = data['yc_amount'] * float(price_in_currency[currency])
        await state.update_data(currency=currency, in_currency=in_currency)

        await message.answer(f'''
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥
–°—É–º–º–∞: {in_currency} {currency}
–†–µ–∫–≤–∏–∑–∏—Ç—ã: {data["card"]}
–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data["name"]}
–ù–∞–∑–≤–∞–Ω–∏–µ –ë–∞–Ω–∫–∞: {data["bank_name"]}
                            ''', parse_mode='Markdown', reply_markup=keyboards.withdrawal_confirm_keyboard)

        await UserWithdrawal.get_confirm.set()

    else:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.currencies_keyboard)


@dp.message_handler(content_types=['text'], state=UserWithdrawal.get_confirm)
async def UserWithdrawal_get_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥':
        data = await state.get_data()

        withdrawal_id = message.message_id

        db.update_user_balance(message.chat.id, -1*data['yc_amount'])

        db.add_withdrawal(withdrawal_id, message.chat.id, data['yc_amount'], data['in_currency'], data['currency'],
                          data['bank_name'], data['name'], data['card'], datetime.now())

        await bot.send_message(ADMIN_CHANNEL_ID, f'''
–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db.get_user_full_name(message.chat.id)} (ID: {message.chat.id})
–°—É–º–º–∞: {data['in_currency']} {data['currency']} (YC - {data['yc_amount']})
–†–µ–∫–≤–∏–∑–∏—Ç—ã: {data["card"]}
–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data["name"]}
–ù–∞–∑–≤–∞–Ω–∏–µ –ë–∞–Ω–∫–∞: {data["bank_name"]}
ID –≤—ã–≤–æ–¥–∞: {withdrawal_id}
                        ''', parse_mode='Markdown',
                               reply_markup=keyboards.withdrawal_admin_keyboard(withdrawal_id))

        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É',
                             reply_markup=keyboards.main_keyboard, parse_mode='Markdown')
        await state.finish()

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.withdrawal_confirm_keyboard)


# –í—ã–≤–æ–¥ G

@dp.message_handler(content_types=['text'], state=UserWithdrawalG.get_amount)
async def UserWithdrawalG_get_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    try:
        g_amount = int(message.text)
    except ValueError:
        return await message.answer('''
–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑
        ''',
                                    reply_markup=keyboards.cancel_keyboard)

    if g_amount <= 0:
        return await message.answer('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    if g_amount < 100:
        return await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ 100 G. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                    reply_markup=keyboards.cancel_keyboard)


    if g_amount > db.get_user_balance_G(message.chat.id):
        return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    await state.update_data(g_amount=g_amount)

    await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ {g_amount} G.', reply_markup=keyboards.withdrawal_confirm_keyboard)
    await UserWithdrawalG.get_confirm.set()


@dp.message_handler(content_types=['text'], state=UserWithdrawalG.get_confirm)
async def UserWithdrawalG_get_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥':
        data = await state.get_data()

        db.update_user_balance_G(message.chat.id, -1*data['g_amount'])

        await bot.send_message(ADMIN_CHANNEL_ID, f'''
–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ G
–°—É–º–º–∞: {data['g_amount']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db.get_user_full_name(message.chat.id)} (ID: {message.chat.id})
                        ''', parse_mode='Markdown',
                               reply_markup=None)

        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
                             reply_markup=keyboards.main_keyboard, parse_mode='Markdown')
        await state.finish()

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.withdrawal_confirm_keyboard)


# –ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞

@dp.message_handler(content_types=['text'], state=UserWriteReview.get_text)
async def UserWriteReview_get_text(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    await message.forward(ORDERS_CHANNEL_ID)
    await state.finish()
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤', reply_markup=keyboards.main_keyboard)

    db.add_review(message.chat.id, message.text)


# –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏

@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.st_id)
async def UserDuelsRegistration_st_id(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    await state.update_data(st_id=message.text)

    await message.answer('–í –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å?', reply_markup=keyboards.game_modes_keyboard)
    await UserDuelsRegistration.game_mode.set()


@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.game_mode)
async def UserDuelsRegistration_game_mode(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text not in ['–ö–æ–º–∞–Ω–¥–Ω—ã–π –ë–æ–π', '–°–æ—é–∑–Ω–∏–∫–∏', '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π', '–≠—Å–∫–∞–ª–∞—Ü–∏—è', '–ì–æ–Ω–∫–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π', '–ê—Ä–∫–∞–¥–∞']:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.game_modes_keyboard)

    await state.update_data(game_mode=message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –†–∞–Ω–≥', reply_markup=keyboards.st_ranks_keyboard)
    await UserDuelsRegistration.st_rank.set()


@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.st_rank)
async def UserDuelsRegistration_st_rank(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text not in ['BRONZE I','BRONZE II','BRONZE III','BRONZE IV','SILVER I','SILVER II','SILVER III','SILVER IV','GOLD I','GOLD II','GOLD III','GOLD IV','PHOENIX','RANGER','CHAMPION','MASTER','ELITE','THE LEGEND']:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.st_ranks_keyboard)

    await state.update_data(st_rank=message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ YC –¥–ª—è —Å—Ç–∞–≤–∫–∏', reply_markup=keyboards.cancel_keyboard)
    await UserDuelsRegistration.bet.set()


@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.bet)
async def UserDuelsRegistration_bet(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        bet_amount = int(message.text)
    except ValueError:
        return await message.answer('''
–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É —á–∏—Å–ª–æ–º.
        ''',
                                    reply_markup=keyboards.cancel_keyboard)

    if bet_amount < 0:
        return await message.answer('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    if bet_amount > db.get_user_balance(message.chat.id):
        return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –µ—â–µ —Ä–∞–∑',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    await state.update_data(bet=bet_amount)

    await message.answer('–í–∞—à –ù–∏–∫ –≤ Standoff2', reply_markup=keyboards.cancel_keyboard)
    await UserDuelsRegistration.st_name.set()


@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.st_name)
async def UserDuelsRegistration_st_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    await state.update_data(st_name=message.text)

    data = await state.get_data()

    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏:')
    await message.answer(f'''
ID –≤ Standoff2: {data["st_id"]}
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {data["game_mode"]}
–í–∞—à –†–∞–Ω–≥: {data["st_rank"]}
–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ YC: {data["bet"]}
–ù–∏–∫ –≤ Standoff2: {data["st_name"]}
    ''', reply_markup=keyboards.duels_confirm_keyboard)

    await UserDuelsRegistration.confirm.set()


@dp.message_handler(content_types=['text'], state=UserDuelsRegistration.confirm)
async def UserDuelsRegistration_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    elif message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å':
        data = await state.get_data()

        if data['bet'] > db.get_user_balance(message.chat.id):
            await state.finish()
            return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
                                        reply_markup=keyboards.main_keyboard, parse_mode='Markdown')

        duel_id = message.message_id
        db.add_duel(duel_id, message.chat.id, data['bet'], data['st_id'], data['game_mode'], data['st_rank'], data['st_name'], 'wait')
        db.update_user_balance(message.chat.id, -1*data['bet'])

        await state.finish()
        await message.answer(f'–î—É—ç–ª—å –Ω–æ–º–µ—Ä {duel_id} —Å–æ–∑–¥–∞–Ω–∞', reply_markup=keyboards.main_keyboard)
    else:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.duels_confirm_keyboard)


# –î—É—ç–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–≤–∏—è

@dp.message_handler(content_types=['text'], state=UserDuelTakePart.st_id)
async def UserDuelTakePart_st_id(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    await state.update_data(st_id=message.text)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –†–∞–Ω–≥', reply_markup=keyboards.st_ranks_keyboard)
    await UserDuelTakePart.st_rank.set()


@dp.message_handler(content_types=['text'], state=UserDuelTakePart.st_rank)
async def UserDuelTakePart_st_rank(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text not in ['BRONZE I','BRONZE II','BRONZE III','BRONZE IV','SILVER I','SILVER II','SILVER III','SILVER IV','GOLD I','GOLD II','GOLD III','GOLD IV','PHOENIX','RANGER','CHAMPION','MASTER','ELITE','THE LEGEND']:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.st_ranks_keyboard)

    await state.update_data(st_rank=message.text)

    await message.answer('–í–∞—à –ù–∏–∫ –≤ Standoff2', reply_markup=keyboards.cancel_keyboard)
    await UserDuelTakePart.st_name.set()


@dp.message_handler(content_types=['text'], state=UserDuelTakePart.st_name)
async def UserDuelTakePart_st_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    await state.update_data(st_name=message.text)

    data = await state.get_data()
    await state.finish()

    db.add_duel_request(data['duel_id'], message.chat.id, data['st_id'], data['st_rank'], data['st_name'])

    try:
        await bot.send_message(db.get_duel_creator_id(data['duel_id']), f'''
–ó–∞—è–≤–∫–∞ –Ω–∞ –¥—É—ç–ª—å #{data['duel_id']}
{db.get_duel_bet(data['duel_id'])} YC | {db.get_duel_game_mode(data['duel_id'])}

–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: 
ID –≤ Standoff2: {data['st_id']}
–†–∞–Ω–≥: {data['st_rank']}
–ù–∏–∫ –≤ Standoff2: {data['st_name']}
        ''', reply_markup=keyboards.duel_request_keyboard(data['duel_id'], message.chat.id))

    except:
        pass

    await message.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=keyboards.main_keyboard)


# –û–±–º–µ–Ω YC –Ω–∞ G

@dp.message_handler(content_types=['text'], state=UserChangeYcToG.amount)
async def UserChangeYcToG_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        yc_amount = int(message.text)
    except ValueError:
        return await message.answer('''
–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑
        ''',
                                    reply_markup=keyboards.cancel_keyboard)

    if yc_amount == 0:
        return await message.answer('–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    if yc_amount > db.get_user_balance(message.chat.id):
        return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑',
                                    reply_markup=keyboards.cancel_keyboard, parse_mode='Markdown')

    await state.update_data(yc_amount=yc_amount)
    await message.answer(f'''
–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å {yc_amount} YC –Ω–∞ {round(yc_amount * float(price_in_currency["G"]), 2)} G?
    ''', reply_markup=keyboards.confirm_keyboard)
    await UserChangeYcToG.confirm.set()


@dp.message_handler(content_types=['text'], state=UserChangeYcToG.confirm)
async def UserChangeYcToG_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboards.main_keyboard)

    elif message.text == '–í–µ—Ä–Ω–æ':
        data = await state.get_data()

        yc_amount = data['yc_amount']
        g_amount = round(yc_amount * float(price_in_currency["G"]), 2)

        db.update_user_balance(message.chat.id, -1*data['yc_amount'])
        db.update_user_balance_G(message.chat.id, g_amount)

        await message.answer('–û–±–º–µ–Ω —Å–æ–≤–µ—Ä—à–µ–Ω',
                             reply_markup=keyboards.main_keyboard, parse_mode='Markdown')
        await state.finish()

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.confirm_keyboard)




# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º

@dp.message_handler(content_types=['text'], state=AdminTopUp.get_amount)
async def AdminTopUp_get_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        yc_amount = int(message.text)
    except Exception as ex:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)

    data = await state.get_data()

    payment_data = db.get_payment_data(data['payment_id'])
    mes_in_channel_id = payment_data[8]

    await successful_payment(data['payment_id'], data['user_id'], yc_amount)

    try:
        await bot.edit_message_reply_markup(ADMIN_CHANNEL_ID, message_id=mes_in_channel_id,
                                            reply_markup=keyboards.payment_confirmed_by_hands)
    except:
        pass

    await message.answer('–ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', reply_markup=keyboards.main_keyboard)
    await state.finish()



# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

@dp.message_handler(content_types=['text'], state=AdminSetWinner.get_id_or_username)
async def AdminSetWinner_get_id_or_username(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    message.text = message.text.strip()
    if message.text.startswith('@'):
        message.text = message.text.replace('@', '')

    search_user = db.search_user(message.text)

    if not search_user:
        return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.cancel_keyboard)

    await message.answer(f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ({message.text})

{db.get_user_full_name(search_user)}
    ''', parse_mode='Markdown')

    await state.update_data(winner_id=search_user)

    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', reply_markup=keyboards.confirm_keyboard)
    await AdminSetWinner.confirm.set()


@dp.message_handler(content_types=['text'], state=AdminSetWinner.confirm)
async def AdminSetWinner_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    elif message.text == '–í–µ—Ä–Ω–æ':
        data = await state.get_data()

        lot_id = data['lot_id']
        lot_data = db.get_lot_data(lot_id)

        status = lot_data[8]

        if not lot_data:
            return await message.answer('Lot_id –Ω–µ –Ω–∞–π–¥–µ–Ω')

        if status != 'active':
            return await message.answer('–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω')

        await set_winner(lot_id, winner_id=data['winner_id'])

        mes_id_in_channel = db.get_lot_mes_id_in_channel(lot_id)

        try:
            await bot.edit_message_caption(ADMIN_CHANNEL_ID, mes_id_in_channel,
                                           caption=f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω, –∏–º —Å—Ç–∞–ª -- {db.get_user_full_name(data["winner_id"])}',
                                           reply_markup=None, parse_mode='Markdown')
        except:
            pass

        await state.finish()
        await message.answer('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω', reply_markup=keyboards.main_keyboard)

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.confirm_keyboard)



# –ò–∑–º–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(content_types=['text'], state=AdminEditUserData.get_user_id)
async def AdminEditUserData_get_user_id(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    search_user = db.search_user(message.text.strip())

    if not search_user:
        return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.cancel_keyboard)

    user_balance = db.get_user_balance(search_user)
    user_level = db.get_user_level(search_user)

    is_baned_user = db.is_baned_user(search_user)

    if is_baned_user:
        baned_text = '–ó–∞–±–∞–Ω–µ–Ω'
    else:
        baned_text = '–ë–µ–∑ –±–∞–Ω–∞'

    await message.answer(f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ({message.text})

{db.get_user_full_name(search_user)}

–ë–∞–ª–∞–Ω—Å: {user_balance} YC
–£—Ä–æ–≤–µ–Ω—å: {user_level}

{baned_text}
        ''', parse_mode='Markdown', reply_markup=keyboards.admin_edit_user_data(search_user))

    await state.finish()


@dp.message_handler(content_types=['text'], state=AdminEditUserData.balance)
async def AdminEditUserData_balance(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        new_balance = float(message.text)
    except:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–∏—Å–ª–æ–º', reply_markup=keyboards.cancel_keyboard)

    db.set_user_balance(data['user_id'], new_balance)

    await state.finish()
    await message.answer(f'–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}', reply_markup=keyboards.main_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditUserData.level)
async def AdminEditUserData_level(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        new_level = int(message.text)
    except:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–∏—Å–ª–æ–º', reply_markup=keyboards.cancel_keyboard)

    db.set_user_level(data['user_id'], new_level)

    await state.finish()
    await message.answer(f'–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_level}')



# –ò–∑–º–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞

@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_help_link)
async def AdminEditBotData_edit_help_link(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text.startswith('@'):
        message.text = message.text.replace('@', 'https://t.me/')

    new_help_link = message.text

    try:
        await message.answer('–¢–µ—Å—Ç', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', url=new_help_link)))

        global help_link
        help_link = new_help_link

        with sqlite3.connect(info_db) as con:
            cursor = con.cursor()

            cursor.execute('UPDATE help_link SET text = (?)', (help_link,))

        await message.answer('–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboards.main_keyboard)
        await state.finish()

    except:
        return await message.answer('–°—Å—ã–ª–∫–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –≤–µ—Ä–Ω—ã–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_help_text)
async def AdminEditBotData_edit_help_text(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    new_help_text = message.text

    global help_text

    help_text = new_help_text

    with sqlite3.connect(info_db) as con:
        cursor = con.cursor()

        cursor.execute('UPDATE help_text SET text = (?)', (help_text,))

    await message.answer('–ù–æ–≤—ã–µ –ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=keyboards.main_keyboard)
    await state.finish()


@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_requisites_type)
async def AdminEditBotData_edit_requisites_type(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text in ['UAH', 'RUB', 'USD']:
        currency = message.text
        await state.update_data(currency=currency)
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}')

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã', reply_markup=keyboards.cancel_keyboard)
        await AdminEditBotData.edit_requisites_data.set()

    else:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.all_currencies_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_requisites_data)
async def AdminEditBotData_edit_requisites_data(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    data = await state.get_data()

    new_requisites = message.text.strip()

    global requisites
    requisites[data['currency']] = new_requisites

    with sqlite3.connect(info_db) as con:
        cursor = con.cursor()

        cursor.execute('UPDATE requisites SET data = (?) WHERE currency = (?)', (new_requisites, data['currency']))

    await message.answer(f'–ù–æ–≤–∞—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è {data["currency"]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=keyboards.main_keyboard)
    await state.finish()


@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_in_currency_type)
async def AdminEditBotData_edit_in_currency_type(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    if message.text in ['UAH', 'RUB', 'USD', 'G']:
        currency = message.text
        await state.update_data(currency=currency)
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}')

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å 1 YC = —Ñ–∏–∞—Ç–∞ –≤ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)
        await AdminEditBotData.edit_in_currency_data.set()

    else:
        return await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.all_currencies_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditBotData.edit_in_currency_data)
async def AdminEditBotData_edit_in_currency_data(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    data = await state.get_data()

    try:
        new_price_in_currency = float(message.text)
    except:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)

    global price_in_currency
    price_in_currency[data['currency']] = new_price_in_currency

    with sqlite3.connect(info_db) as con:
        cursor = con.cursor()

        cursor.execute('UPDATE price_in_currency SET data = (?) WHERE currency = (?)', (new_price_in_currency, data['currency']))

    await message.answer(f'–ù–æ–≤–∞—è —Ü–µ–Ω–∞ 1 YC = {new_price_in_currency} {data["currency"]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboards.main_keyboard)
    await state.finish()



# –†–∞—Å—Å—ã–ª–∫–∞

@dp.message_handler(content_types=['photo', 'video', 'text'], state=AdminMail.get_data)
async def admin_get_data(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            await state.finish()
            return await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=keyboards.main_keyboard)

        else:
            async with state.proxy() as data:
                data['content_type'] = 'text'
                data['text'] = message.text
                data['entities'] = message.entities

    elif message.content_type == 'photo':
        async with state.proxy() as data:
            data['content_type'] = 'photo'
            data['file_id'] = message.photo[0].file_id
            data['caption'] = message.caption
            data['entities'] = message.caption_entities

    elif message.content_type == 'video':
        async with state.proxy() as data:
            data['content_type'] = 'video'
            data['file_id'] = message.video.file_id
            data['caption'] = message.caption
            data['entities'] = message.caption_entities

    await AdminMail.confirm.set()
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=keyboards.confirm_keyboard)


@dp.message_handler(state=AdminMail.confirm)
async def admin_get_data(message: types.Message, state: FSMContext):
    if message.text != '–í–µ—Ä–Ω–æ':
        await state.finish()
        return await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=keyboards.main_keyboard)

    all_users_ids = db.get_all_users_ids()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–ª—è {len(all_users_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=keyboards.main_keyboard)

    not_active_users = []

    data = await state.get_data()
    await state.finish()

    if data['content_type'] == 'text':
        for user_id in all_users_ids:
            try:
                await bot.send_message(user_id, data['text'], entities=data['entities'])
            except:
                not_active_users.append(user_id)

    elif data['content_type'] == 'photo':
        for user_id in all_users_ids:
            try:
                await bot.send_photo(user_id, data['file_id'], caption=data["caption"],
                                     caption_entities=data['entities'])
            except:
                not_active_users.append(user_id)

    elif data['content_type'] == 'video':
        for user_id in all_users_ids:
            try:
                await bot.send_video(user_id, data['file_id'], caption=data["caption"],
                                     caption_entities=data['entities'])
            except:
                not_active_users.append(user_id)

    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫—É –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ {len(not_active_users)}.\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π {len(all_users_ids)}')



# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞

@dp.message_handler(content_types=['text'], state=AdminAddPromoCode.promo_type)
async def AdminAddPromoCode_promo_type(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    elif message.text in ['–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é']:
        if message.text == '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ':
            promo_type = 'bonus'
        elif message.text == '–ü—Ä–æ—Ü–µ–Ω—Ç –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é':
            promo_type = 'percent'

        await state.update_data(promo_type=promo_type)
        await AdminAddPromoCode.amount.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.promo_code_types_keyboard)


@dp.message_handler(content_types=['text'], state=AdminAddPromoCode.amount)
async def AdminAddPromoCode_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        amount = int(message.text)

        await state.update_data(amount=amount)
        await AdminAddPromoCode.name.set()
        await message.answer('–ù–∞–∑–≤–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=keyboards.cancel_keyboard)


    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=AdminAddPromoCode.name)
async def AdminAddPromoCode_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    name = message.text
    await state.update_data(name=name)

    await AdminAddPromoCode.activations.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=AdminAddPromoCode.activations)
async def AdminAddPromoCode_activations(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        activations = int(message.text)
    except:
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)


    await state.update_data(activations=activations)

    data = await state.get_data()

    if data['promo_type'] == 'bonus':
        promo_type_text = '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ'
    elif data['promo_type'] == 'percent':
        promo_type_text = '–ü—Ä–æ—Ü–µ–Ω—Ç –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é'
    else:
        promo_type_text = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'

    await message.answer(f'''
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:

–ü—Ä–æ–º–æ–∫–æ–¥: {data['name']}
–¢–∏–ø: {promo_type_text}
–ß–∏—Å–ª–æ –º–æ–Ω–µ—Ç/%–∫ –ø–æ–ø–ª–Ω–µ–Ω–∏—é: {data['amount']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {data['activations']}

''', reply_markup=keyboards.confirm_keyboard)

    await AdminAddPromoCode.confirm.set()


@dp.message_handler(content_types=['text'], state=AdminAddPromoCode.confirm)
async def AdminAddPromoCode_confirm(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    elif message.text == '–í–µ—Ä–Ω–æ':
        data = await state.get_data()

        is_promo = db.get_promo_code_data(data['name'])

        if is_promo:
            await state.finish()
            await message.answer('–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ', reply_markup=keyboards.main_keyboard)
        else:
            db.add_promo_code(message.message_id, data['name'], data['promo_type'], data['amount'], data['activations'])

            await state.finish()
            await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=keyboards.main_keyboard)

    else:
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=keyboards.confirm_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditPromo.activations)
async def AdminEditPromo_activations(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        activations = int(message.text)

        data = await state.get_data()

        db.update_promo_code_activations(data['promo_id'], activations)

        await state.finish()

        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboards.main_keyboard)

    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=AdminEditPromo.amount)
async def AdminEditPromo_amount(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    try:
        amount = int(message.text)

        data = await state.get_data()

        db.update_promo_code_amount(data['promo_id'], amount)

        await state.finish()

        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboards.main_keyboard)

    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', reply_markup=keyboards.cancel_keyboard)


@dp.message_handler(content_types=['text'], state=UserPromoCode.name)
async def UserPromoCode_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    name = message.text

    promo_data = db.get_promo_code_data(name)

    if promo_data:
        promo_id, name, promo_type, amount, activations, members = promo_data
        members_list = members.split(',')

        if len(members_list) - 1 >= activations:
            await state.finish()
            return await message.answer('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑',
                                        reply_markup=keyboards.main_keyboard)

        if str(message.chat.id) in members_list:
            await state.finish()
            return await message.answer('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥',
                                        reply_markup=keyboards.main_keyboard)

        if promo_type == 'bonus':
            db.update_user_balance(message.chat.id, amount)

            members_list.append(str(message.chat.id))
            db.add_promo_activation(name, ','.join(members_list))

            await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} YC',
                                 reply_markup=keyboards.main_keyboard)

        elif promo_type == 'percent':
            if db.get_user_active_promo_code(message.chat.id):
                await state.finish()
                return await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –±–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é',
                                            reply_markup=keyboards.main_keyboard)

            db.update_user_active_promo_code(message.chat.id, name)
            members_list.append(str(message.chat.id))
            db.add_promo_activation(name, ','.join(members_list))

            await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–Ω –¥–∞—Å—Ç –í–∞–º –±–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é {amount}%',
                                 reply_markup=keyboards.main_keyboard)

        else:
            await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω', reply_markup=keyboards.main_keyboard)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboards.main_keyboard)

    await state.finish()


# –ü–æ–∏—Å–∫ –¥—É—ç–ª–∏

@dp.message_handler(content_types=['text'], state=AdminDuelInfo.duel_id)
async def AdminDuelInfo_duel_id(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        return await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.main_keyboard)

    message.text = message.text.replace('#', '')
    duel_id = message.text

    duel_info = db.get_duel_info(duel_id)

    if not duel_info:
        return await message.answer('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—É—ç–ª–∏ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.cancel_keyboard)

    duel_id, user_first, user_second, bet, st_id, game_mode, st_rank, st_name, status, winnner = duel_info

    player_one_info = db.duel_player_info(duel_id, user_first)
    st_id, st_rank, st_name = player_one_info
    user_result = db.duel_get_user_result(duel_id, user_first=user_first)

    if user_result == 'win':
        user_result = '–í—ã–∏–≥—Ä—ã—à'
    elif user_result == 'lose':
        user_result = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    else:
        user_result = '–ù–µ —É–∫–∞–∑–∞–Ω'

    data = {}
    data.update(
        {
            user_first: {
                'st_id': st_id,
                'st_rank': st_rank,
                'st_name': db.filter_text_markdown(st_name),
                'result': user_result
            }
        })

    player_two_info = db.duel_player_info(duel_id, user_second)
    st_id, st_rank, st_name = player_two_info
    user_result = db.duel_get_user_result(duel_id, user_second=user_second)

    if user_result == 'win':
        user_result = '–í—ã–∏–≥—Ä—ã—à'
    elif user_result == 'lose':
        user_result = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    else:
        user_result = '–ù–µ —É–∫–∞–∑–∞–Ω'

    data.update(
        {
            user_second: {
                'st_id': st_id,
                'st_rank': st_rank,
                'st_name': db.filter_text_markdown(st_name),
                'result': user_result
            }
        })

    await state.finish()

    status = db.get_duel_status(duel_id)
    if status == 'progress':
        keyboard = keyboards.admin_duel_set_result(duel_id)
    else:
        keyboard = None

    if status == 'wait':
        duel_status_label = '–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –°–æ–∑–¥–∞–Ω–∞'
    elif status == 'progress':
        duel_status_label = '–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –í –ø—Ä–æ—Ü–µ—Å—Å–µ'
    elif status == 'end':
        duel_status_label = '–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –ó–∞–∫–æ–Ω—á–µ–Ω–∞'
    else:
        duel_status_label = ''

    await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É—ç–ª–∏:', reply_markup=keyboards.main_keyboard)
    await message.answer(f'''
–î—É—ç–ª—å #{duel_id}
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {game_mode}
–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ YC: {bet}
{duel_status_label}

–ò–≥—Ä–æ–∫ 1:
{db.get_user_full_name(user_first)}
ID –≤ Standoff2: {data[user_first]['st_id']}
–†–∞–Ω–≥: {data[user_first]['st_rank']}
–ù–∏–∫ –≤ Standoff2: {data[user_first]['st_name']}
–í—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª–∞—Ç: {data[user_first]['result']}

–ò–≥—Ä–æ–∫ 2:
{db.get_user_full_name(user_second)}
ID –≤ Standoff2: {data[user_second]['st_id']}
–†–∞–Ω–≥: {data[user_second]['st_rank']}
–ù–∏–∫ –≤ Standoff2: {data[user_second]['st_name']}
–í—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª–∞—Ç: {data[user_second]['result']}

    ''', parse_mode='Markdown', reply_markup=keyboard)
    await state.finish()


async def successful_payment(payment_id, user_id, yc_amount, promo_bonus=False):
    payment_data = db.get_payment_data(payment_id)

    status = payment_data[5]

    if status != 'created':
        return

    db.update_user_balance(user_id, yc_amount)
    db.update_payment_status(payment_id, 'confirmed')

    try:
        await bot.send_message(user_id, f'''
–ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
–ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {yc_amount} –º–æ–Ω–µ—Ç
                        ''')
    except:
        pass

    if promo_bonus:
        db.update_user_balance(user_id, yc_amount)
        try:
            await bot.send_message(user_id, f'''
–ó–∞ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {yc_amount} –º–æ–Ω–µ—Ç.
                            ''')
        except:
            pass

    referrer_id = db.check_referral(user_id)
    if referrer_id:
        try:
            await bot.send_message(referrer_id, f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {db.get_user_full_name(user_id)} —Å–¥–µ–ª–∞–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 YLION COIN',
                                   parse_mode='Markdown')
        except:
            pass


async def send_active_lots(message, page, user_lots=False):
    active_lots = db.get_active_lots(user_lots=user_lots)

    if not active_lots:
        return await message.answer('–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π')

    if page == -1:
        return

    if page+1 > ceil(len(active_lots)/PAGINATION_ACTIVE_LOTS):
        return

    if active_lots:
        keyboard = keyboards.active_lots_keyboard(active_lots, page, user_lots=user_lots)
        try:
            await message.edit_reply_markup(reply_markup=keyboard)
        except:
            await message.answer('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π', reply_markup=keyboard)
    else:
        await message.answer('–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π')


async def send_duels_list(message, page, free=False):
    active_duels = db.get_active_duels(free)

    if not active_duels:
        return await message.answer('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥—É—ç–ª–µ–π')

    if page == -1:
        return

    if page+1 > ceil(len(active_duels)/10):
        return

    if active_duels:
        keyboard = keyboards.list_duels_keyboard(active_duels, page=page, free=free)
        try:
            await message.edit_reply_markup(reply_markup=keyboard)
        except:
            await message.answer('–°–ø–∏—Å–æ–∫ –¥—É—ç–ª–µ–π', reply_markup=keyboard)
    else:
        await message.answer('–°–µ–π—á–∞—Å –Ω–µ—Ç –¥—É—ç–ª–µ–π')


def lot_text(name, description, one_bid_price, now_bids, total_bids, need_level, user_bids_count):
    if one_bid_price == 0:
        one_bid_price = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'

    return f'''
{name}

{description}

–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {one_bid_price}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {now_bids} –∏–∑ {total_bids}

–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ–º—ã–π –¥–ª—è —É—á–∞—Å—Ç–∏—è: {need_level}

–í–∞—à–∏—Ö —É—á–∞—Å—Ç–∏–π: {user_bids_count}
        '''


async def set_winner(lot_id, winner_id):
    db.set_complete_lot(lot_id, winner_id)

    await send_winner_message(lot_id, winner_id)
    await automatic_prize(lot_id, winner_id)
    await send_winner_post(lot_id, winner_id)


async def set_winners(lot_id, winners_ids):
    db.set_complete_lot(lot_id, ','.join(winners_ids))

    for winner_id in winners_ids:
        await send_winner_message(lot_id, winner_id)
        await automatic_prize(lot_id, winner_id)
        await send_winners_post(lot_id, winners_ids)


async def send_winner_post(lot_id, winner_id):
    lot_data = db.get_lot_data(lot_id)

    full_name = db.get_user_full_name(winner_id)

    name = lot_data[1]
    image = lot_data[6]

    caption = f'''
–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ {name} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name}
    '''

    await bot.send_photo(MAIN_CHANNEL, image, caption=caption, parse_mode='Markdown')


async def send_winners_post(lot_id, winners_ids):
    lot_data = db.get_lot_data(lot_id)

    full_names = '\n'.join(list(map(db.get_user_full_name, winners_ids)))

    name = lot_data[1]
    image = lot_data[6]

    caption = f'''
–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ {name} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ —Å—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{full_names}
    '''

    await bot.send_photo(MAIN_CHANNEL, image, caption=caption, parse_mode='Markdown')


async def send_winner_message(lot_id, winner_id):
    lot_data = db.get_lot_data(lot_id)

    name = lot_data[1]
    image = lot_data[6]

    caption = f'''
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º
–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {name}
    '''

    try:
        await bot.send_photo(winner_id, image, caption=caption, parse_mode='Markdown')
    except:
        full_name = db.get_user_full_name(winner_id)

        await bot.send_message(ADMIN_CHANNEL_ID, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name}. –ü–æ–±–µ–¥–∏—Ç–µ–ª—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {name}',
                               parse_mode='Markdown')


async def automatic_prize(lot_id, winner_id):
    lot_data = db.get_lot_data(lot_id)

    prize_amount = lot_data[13]

    if prize_amount > 0:
        db.update_user_balance(winner_id, prize_amount)

        try:
            await bot.send_message(winner_id, f'–í–∞–º –Ω–∞—Å—á–∏—Ç–∞–Ω –ø—Ä–∏–∑ {prize_amount} YC')
        except:
            pass


@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    if ' ' in message.text:
        if 'payment_id' in message.text and message.chat.id in ADMIN_IDS:
            payment_id = message.text.split('payment_id=')[1]
            payment_data = db.get_payment_data(payment_id)

            if not payment_data:
                return await message.answer('Payment_id –Ω–µ –Ω–∞–π–¥–µ–Ω')

            user_id = payment_data[1]

            await state.update_data(user_id=user_id, payment_id=payment_id)

            await message.answer(f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db.get_user_full_name(user_id)}

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–æ–Ω–µ—Ç –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å
            ''', parse_mode='Markdown', reply_markup=keyboards.cancel_keyboard)

            return await AdminTopUp.get_amount.set()

        elif 'set_winner_lot_id' in message.text and message.chat.id in ADMIN_IDS:
            lot_id = message.text.split('set_winner_lot_id=')[1]
            lot_data = db.get_lot_data(lot_id)

            name = lot_data[1]
            status = lot_data[8]

            if not lot_data:
                return await message.answer('Lot_id –Ω–µ –Ω–∞–π–¥–µ–Ω')

            if status != 'active':
                return await message.answer('–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω')

            await state.update_data(lot_id=lot_id)

            await message.answer(f'''
–†–æ–∑—ã–≥—Ä—ã—à {name}

–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                        ''', parse_mode='Markdown', reply_markup=keyboards.cancel_keyboard)

            return await AdminSetWinner.get_id_or_username.set()


        else:
            try:
                referrer_id = int(message.text.split(' ', maxsplit=1)[1])
                referral_id = message.chat.id
                if referrer_id != referral_id:
                    db.add_referral(referral_id, referrer_id)
            except:
                pass

    db.add_new_user(message.chat.id,
                    message.from_user.first_name,
                    message.from_user.last_name if message.from_user.last_name else '',
                    message.from_user.username if message.from_user.username else ''
                    )

    await message.answer('''
–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å ‚ú®‚öîÔ∏è

–£ –Ω–∞—Å –≤–µ—Å–µ–ª–æ ü§© –∏ –æ—á–µ–Ω—å –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚öîÔ∏è

üíé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞ —Å–∫–∏–Ω—ã , –ì–æ–ª–¥—É –∏ YLION –ö–æ–∏–Ω—ã üî•

üíé –ö—Ä—É—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –î—É—ç–ª–µ–π, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ , –¥–µ–ª–∞—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ YC , –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚öîÔ∏è

–ê –≤ –ø–ª–∞–Ω–∞—Ö —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –¥–æ —Å–∞–º–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Standoff 2 üî´

üíï–ù–∞–¥–µ–µ–º—Å—è –≤–∞–º —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è 

                                      –í–∞—à GM YLION
    ''', reply_markup=keyboards.main_keyboard)


@dp.message_handler(commands=['admin'], state='*')
async def admin_command(message: types.Message, state: FSMContext):
    if message.chat.id in ADMIN_IDS:
        await message.answer('–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å', reply_markup=keyboards.admin_keyboard)
    elif message.chat.id in MANAGER_IDS:
        await message.answer('–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', reply_markup=keyboards.manager_keyboard)


@dp.message_handler(content_types=['text'], state='*')
async def text_worker(message: types.Message, state: FSMContext):
    # if message.chat.type == 'supergroup':
    #     if message.chat.id == ORDERS_CHAT_ID:
    #         chat_status = await bot.get_chat_member(ORDERS_CHAT_ID, message.from_user.id)
    #
    #         if chat_status.status not in ['creator', 'administrator']:
    #             await bot.restrict_chat_member(ORDERS_CHAT_ID, message.from_user.id,
    #                                            permissions=types.ChatPermissions(can_send_messages=False))

    if message.chat.type != 'private':
        return

    db.add_new_user(message.chat.id,
                    message.from_user.first_name,
                    message.from_user.last_name if message.from_user.last_name else '',
                    message.from_user.username if message.from_user.username else ''
                    )

    if message.text == '–†–û–ó–´–ì–†–´–®–ò':
        await send_active_lots(message, 0)

    elif message.text == '–î–£–≠–õ–¨':
        await message.answer('–î—É—ç–ª–∏', reply_markup=keyboards.duels_keyboard)

    elif message.text == '–ü–†–û–§–ò–õ–¨':
        user_balance = db.get_user_balance(message.chat.id)
        user_balance_G = db.get_user_balance_G(message.chat.id)
        user_level = db.get_user_level(message.chat.id)
        user_participation = db.get_user_participation(message.chat.id)

        await message.answer(f'''
–ü—Ä–æ—Ñ–∏–ª—å

–í–∞—à ID: {message.chat.id}

–ë–∞–ª–∞–Ω—Å YC: {user_balance}
–ë–∞–ª–∞–Ω—Å G: {user_balance_G}

–£—Ä–æ–≤–µ–Ω—å: {user_level}

–£—á–∞—Å—Ç–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö: {user_participation}
        ''', reply_markup=keyboards.cabinet_keyboard)

    elif message.text == '–¢–û–ü 10':
        top_users = db.get_top_users_spent_balance()
        top_donates_users = db.get_top_users_donations()
        top_duel_winners = db.get_top_duel_winners()

        text = '–¢–æ–ø 10 –ò–≥—Ä–æ–∫–æ–≤ –≤ –î—É—ç–ª–∏:\n\n'

        n = 1
        for user_id, amount in top_duel_winners:

            text += f'{n}) {db.get_user_full_name(user_id)} -- {amount} –ø–æ–±–µ–¥\n'
            n += 1

        text += '\n\n–¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–Ω–∞—Ç–∞–º (YC):\n\n'

        n = 1
        for user_id, amount in top_donates_users:
            text += f'{n}) {db.get_user_full_name(user_id)} -- {amount} YC\n'
            n += 1

        text += '\n\n–¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã–º YC:\n\n'

        n = 1
        for user_id, amount in top_users:
            text += f'{n}) {db.get_user_full_name(user_id)} -- {amount} YC\n'
            n += 1

        await message.answer(text, parse_mode='Markdown')

    elif message.text == '–ü–†–û–ú–û–ö–û–î':
        await UserPromoCode.name.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=keyboards.cancel_keyboard)

    elif message.text == '–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê':
        referrals_count, bonus = db.user_referral_info(message.chat.id)

        await message.answer(f'''
–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{bot_username}?start={message.chat.id}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}

–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {bonus}
            ''', )

    elif message.text == '–ü–†–ê–í–ò–õ–ê':
        await message.answer(help_text)

    elif message.text == '–ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –ë–û–¢–û–ú':
        await message.answer(how_use_bot_text)

    elif message.text == '–ü–û–î–î–ï–†–ñ–ö–ê':
        await message.answer('''
–ß–∞—Å—ã –†–∞–±–æ—Ç—ã –ü–æ–¥–¥–µ—Ä–∂–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 08:00 –¥–æ 00:00 
        ''', reply_markup=keyboards.help_contact(help_link))

    elif message.text == '–û–¢–ó–´–í–´':
        review = db.get_review(message.chat.id)

        await message.answer(f'''
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ:
{ORDERS_CHAT_LINK}
        ''', reply_markup=keyboards.orders_chat_keyboard(review))

    else:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.main_keyboard)


@dp.callback_query_handler(lambda call: True, state='*')
async def callback_worker(call: types.CallbackQuery, state: FSMContext):
    if call.data.startswith('admin'):
        if call.data == 'admin_create_lot':
            await call.message.delete()
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', reply_markup=keyboards.cancel_keyboard)
            await AdminCreateLot.create_lot_name.set()

        elif call.data.startswith('admin_delete_lot_'):
            lot_id = call.data.split('admin_delete_lot_')[1]

            db.delete_lot(lot_id)
            await call.message.delete()

        elif call.data.startswith('admin_mail_lot_'):
            await call.message.edit_reply_markup(reply_markup=None)

            lot_id = call.data.split('admin_mail_lot_')[1]
            lot_data = db.get_lot_data(lot_id)

            name = lot_data[1]
            description = lot_data[2]
            image = lot_data[6]

            mail_caption = f'''
{name}

{description}

–£—Å–ø–µ–π –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ ü§©‚ú®
                    '''

            keyboard = keyboards.lot_keyboard(lot_id, is_admin=False)

            await call.message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –ª–æ—Ç–∞ ‚Ññ{lot_id} –Ω–∞—á–∞–ª–∞—Å—å')

            all_users_ids = db.get_all_users_ids()
            for user_id in all_users_ids:
                try:
                    await bot.send_photo(user_id, image, mail_caption, reply_markup=keyboard)
                except:
                    pass
            await call.message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –ª–æ—Ç–∞ ‚Ññ{lot_id} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')

        elif call.data.startswith('admin_payment'):
            if call.data.startswith('admin_payment_confirm_'):
                payment_id = call.data.split('admin_payment_confirm_')[1]
                payment_data = db.get_payment_data(payment_id)

                user_id = payment_data[1]
                yc_amount = payment_data[2]

                promo_bonus = False

                promo_percent = db.get_user_active_promo_code(user_id)
                if promo_percent:
                    bonus = round(yc_amount / 100 * promo_percent)
                    if bonus >= 1:
                        promo_bonus = bonus

                    db.update_user_active_promo_code(user_id, '')

                await successful_payment(payment_id, user_id, yc_amount, promo_bonus=promo_bonus)

                try:
                    await call.message.edit_reply_markup(reply_markup=keyboards.payment_confirmed)
                except:
                    pass

            elif call.data.startswith('admin_payment_reject_'):
                payment_id = call.data.split('admin_payment_reject_')[1]
                payment_data = db.get_payment_data(payment_id)

                user = payment_data[1]

                db.update_payment_status(payment_id, 'canceled')

                try:
                    await bot.send_message(user, f'''
    –ü–ª–∞—Ç–µ–∂ ‚Ññ{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω
                                ''')
                except:
                    pass

                await call.message.edit_reply_markup(reply_markup=keyboards.payment_canceled)

        elif call.data.startswith('admin_withdrawal'):
            if call.data.startswith('admin_withdrawal_confirm_'):
                withdrawal_id = int(call.data.split('admin_withdrawal_confirm_')[1])
                withdrawal_data = db.get_withdrawal_data(withdrawal_id)

                user_id = withdrawal_data[1]

                db.update_withdrawal_status(withdrawal_id, 'confirmed')

                try:
                    await bot.send_message(user_id, f'–í–∞—à –≤—ã–≤–æ–¥ ‚Ññ{withdrawal_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
                except:
                    pass

                await call.message.edit_reply_markup(reply_markup=keyboards.withdrawal_confirmed)

            elif call.data.startswith('admin_withdrawal_reject_'):
                withdrawal_id = int(call.data.split('admin_withdrawal_reject_')[1])
                withdrawal_data = db.get_withdrawal_data(withdrawal_id)

                user_id = withdrawal_data[1]
                yc_amount = withdrawal_data[2]

                db.update_user_balance(user_id, yc_amount)
                db.update_withdrawal_status(withdrawal_id, 'canceled')

                try:
                    await bot.send_message(user_id, f'–í–∞—à–µ–º—É –≤—ã–≤–æ–¥—É ‚Ññ{withdrawal_id} –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã',
                                           reply_markup=keyboards.help_contact)
                except:
                    pass

                await call.message.edit_reply_markup(reply_markup=keyboards.withdrawal_canceled)

        elif call.data == 'admin_user_profile':
            await call.message.answer(f'''
–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                                      ''', parse_mode='Markdown', reply_markup=keyboards.cancel_keyboard)
            await AdminEditUserData.get_user_id.set()

            await call.message.edit_reply_markup(reply_markup=None)

        elif call.data.startswith('admin_edit_user'):
            if call.data.startswith('admin_edit_user_ban_'):
                user_id = call.data.split('admin_edit_user_ban_')[1]

                new_status = db.ban_or_unban_user(user_id)

                if new_status:
                    await storage.set_state(user=user_id, chat=user_id, state='ban')
                    await call.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω', show_alert=True)
                else:
                    await storage.set_state(user=user_id, chat=user_id, state='*')
                    await call.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –±–µ–∑ –±–∞–Ω–∞', show_alert=True)

            elif call.data.startswith('admin_edit_user_balance_'):
                user_id = call.data.split('admin_edit_user_balance_')[1]

                await state.update_data(user_id=user_id)

                await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboards.cancel_keyboard)
                await AdminEditUserData.balance.set()

            elif call.data.startswith('admin_edit_user_level_'):
                user_id = call.data.split('admin_edit_user_level_')[1]

                await state.update_data(user_id=user_id)

                await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboards.cancel_keyboard)
                await AdminEditUserData.level.set()

            elif call.data.startswith('admin_edit_user_w_limits_'):
                user_id = call.data.split('admin_edit_user_w_limits_')[1]

                db.add_non_limit_user(user_id)

                await call.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–Ω—è—Ç—ã –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—ã–≤–æ–¥')

        elif call.data == 'admin_edit_bot_data':
            await call.message.edit_reply_markup(reply_markup=keyboards.admin_edit_bot_data)

        elif call.data.startswith('admin_edit_bot'):
            if call.data == 'admin_edit_bot_requisites':
                await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=keyboards.all_currencies_keyboard)
                await AdminEditBotData.edit_requisites_type.set()

            elif call.data == 'admin_edit_bot_in_currency':
                await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=keyboards.all_currencies_keyboard)
                await AdminEditBotData.edit_in_currency_type.set()

            elif call.data == 'admin_edit_bot_help_link':
                await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º', reply_markup=keyboards.cancel_keyboard)
                await AdminEditBotData.edit_help_link.set()

            elif call.data == 'admin_edit_bot_help_text':
                await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª', reply_markup=keyboards.cancel_keyboard)
                await AdminEditBotData.edit_help_text.set()

        elif call.data == 'admin_count_users':
            all_users_ids = db.get_all_users_ids()

            await call.message.answer(f'–í—Å–µ–≥–æ –≤ –±–æ—Ç–µ {len(all_users_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        elif call.data == 'admin_mail':
            await AdminMail.get_data.set()
            await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=keyboards.cancel_keyboard)

        elif call.data == 'admin_promo_codes':
            await call.message.edit_text('–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å\n–ü—Ä–æ–º–æ–∫–æ–¥—ã', reply_markup=keyboards.admin_promo_codes_keyboard)
        elif call.data == 'admin_add_promo_code':
            await AdminAddPromoCode.promo_type.set()
            await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞', reply_markup=keyboards.promo_code_types_keyboard)

        elif call.data == 'admin_promo_codes_list':
            active_promo_codes = db.get_active_promo_codes()
            await call.message.answer('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ –∫–æ–¥—ã',
                                      reply_markup=keyboards.generate_active_promo_codes_keyboard(active_promo_codes))

        elif call.data.startswith('admin_edit_promo_'):
            promo_id = int(call.data.split('admin_edit_promo_', maxsplit=1)[1])
            promo_data = db.get_promo_code_data_by_id(promo_id)
            promo_id, name, promo_type, amount, activations, members = promo_data

            if promo_type == 'bonus':
                promo_type_text = '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ'
            elif promo_type == 'percent':
                promo_type_text = '–ü—Ä–æ—Ü–µ–Ω—Ç –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é'
            else:
                promo_type_text = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'

            members_list = members.split(',')

            await call.message.answer(f'''
–ü—Ä–æ–º–æ–∫–æ–¥: {name}
–¢–∏–ø: {promo_type_text}
–ß–∏—Å–ª–æ –º–æ–Ω–µ—Ç/%–∫ –ø–æ–ø–ª–Ω–µ–Ω–∏—é: {amount}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {len(members_list)}/{activations}
            ''', reply_markup=keyboards.edit_promo_code(promo_id))

        elif call.data == 'admin_back':
            await call.message.edit_text('–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å', reply_markup=keyboards.admin_keyboard)

        elif call.data == 'admin_duel':
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—É—ç–ª–∏', reply_markup=keyboards.cancel_keyboard)
            await AdminDuelInfo.duel_id.set()

        elif call.data.startswith('admin_duel_result_'):
            call_data = call.data.split('admin_duel_result_')[1]
            result, duel_id = call_data.split('_')

            status = db.get_duel_status(duel_id)
            if status != 'progress':
                return await call.answer('–î—É—ç–ª—å —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞', show_alert=True)

            user_first = db.get_duel_creator_id(duel_id)
            user_second = db.duel_opponent_id(duel_id, user_first)

            if result in ['win1', 'win2']:
                if result == 'win1':
                    winner = user_first
                elif result == 'win2':
                    winner = user_second

                bet = db.get_duel_bet(duel_id)
                win_amount = 2 * bet * 0.9

                db.duel_update_to_end(duel_id, winner)
                db.update_user_balance(winner, win_amount)

                try:
                    await bot.send_message(winner, f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ #{duel_id}. –í–∞—à –≤—ã–∏–≥—Ä—ã—à {win_amount} YC')
                except:
                    pass

            elif result == 'draw':
                bet = db.get_duel_bet(duel_id)

                db.update_user_balance(user_first, bet)
                db.update_user_balance(user_second, bet)
                db.duel_update_to_end(duel_id, '–í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–æ–∫')

                try:
                    await bot.send_message(user_first, f'–î—É—ç–ª—å #{duel_id}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–æ–∫')
                except:
                    pass
                try:
                    await bot.send_message(user_second, f'–î—É—ç–ª—å #{duel_id}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–æ–∫')
                except:
                    pass

            try:
                await call.message.edit_reply_markup(reply_markup=None)
            except:
                pass

            await call.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', show_alert=True)


    elif call.data.startswith('promo_edit_'):
        if call.data.startswith('promo_edit_activations_'):
            promo_id = int(call.data.split('promo_edit_activations_', maxsplit=1)[1])
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', reply_markup=keyboards.cancel_keyboard)
            await AdminEditPromo.activations.set()
            await state.update_data(promo_id=promo_id)

        elif call.data.startswith('promo_edit_amount_'):
            promo_id = int(call.data.split('promo_edit_amount_', maxsplit=1)[1])
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç/–∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç', reply_markup=keyboards.cancel_keyboard)
            await AdminEditPromo.amount.set()
            await state.update_data(promo_id=promo_id)

        elif call.data.startswith('promo_edit_delete_'):
            promo_id = int(call.data.split('promo_edit_delete_', maxsplit=1)[1])
            db.delete_promo_code(promo_id)

            await call.message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω')
            await call.message.delete()

    elif call.data.startswith('lot'):
        if call.data.startswith('lot_data_'):
            await call.message.delete()

            lot_id = call.data.split('lot_data_', maxsplit=1)[1]
            lot_data = db.get_lot_data(lot_id)

            name = lot_data[1]
            description = lot_data[2]
            one_bid_price = lot_data[3]
            total_bids = lot_data[4]
            need_level = lot_data[5]
            members = lot_data[7]
            image = lot_data[6]
            now_bids = lot_data[9]

            user_bids_count = members.split(',').count(f'{call.message.chat.id}')

            caption = lot_text(name, description, one_bid_price, now_bids, total_bids, need_level, user_bids_count)

            if call.message.chat.id in ADMIN_IDS:
                is_admin=True
            else:
                is_admin=False

            await call.message.answer_photo(image, caption, reply_markup=keyboards.lot_keyboard(lot_id, is_admin=is_admin))

        elif call.data.startswith('lots_my_page_'):
            page = int(call.data.split('lots_my_page_')[1])
            await send_active_lots(call.message, page, user_lots=call.message.chat.id)

        elif call.data.startswith('lots_page_'):
            page = int(call.data.split('lots_page_')[1])
            await send_active_lots(call.message, page)

        elif call.data.startswith('lot_choose_winner_'):
            if call.data.startswith('lot_choose_winner_random_'):
                lot_id = call.data.split('lot_choose_winner_random_')[1]

                members = db.get_lot_members(lot_id).split(',')[:-1]
                winners_amount = db.get_winners_amount(lot_id)

                if winners_amount == 1:
                    winner_id = random.choice(members)

                    await set_winner(lot_id, winner_id)

                    await call.message.edit_caption(caption=f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω, –∏–º —Å—Ç–∞–ª -- {db.get_user_full_name(winner_id)}',
                                                    reply_markup=None, parse_mode='Markdown')

                else:
                    winners_ids = []

                    for i in range(1, winners_amount+1):
                        winner_id = random.choice(members)
                        winners_ids.append(winner_id)

                        while winner_id in members:
                            members.remove(winner_id)

                    await set_winners(lot_id, winners_ids)

                    winners_text = ','.join(list(map(db.get_user_full_name, winners_ids)))

                    await call.message.edit_caption(caption=f'–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã, –∏–º–∏ —Å—Ç–∞–ª–∏ -- {winners_text}',
                                                    reply_markup=None, parse_mode='Markdown')

            # elif call.data.startswith('lot_choose_winner_manually_'):
            #     lot_id = call.data.split('lot_choose_winner_manually_')[1]

    elif call.data == 'my_lots':
        await call.message.delete()
        await send_active_lots(call.message, 0, user_lots=call.message.chat.id)

    elif call.data == 'change_yc_to_g':
        await call.message.answer(f'''
1 YC = {price_in_currency["G"]} G
        
–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ YC –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ G
        ''', reply_markup=keyboards.cancel_keyboard)
        await UserChangeYcToG.amount.set()

    elif call.data.startswith('take_part_in_'):
        lot_id = call.data.split('take_part_in_', maxsplit=1)[1]

        user_balance = db.get_user_balance(call.message.chat.id)
        user_level = db.get_user_level(call.message.chat.id)

        lot_data = db.get_lot_data(lot_id)

        name = lot_data[1]
        description = lot_data[2]
        one_bid_price = lot_data[3]
        total_bids = lot_data[4]
        need_level = lot_data[5]
        image = lot_data[6]
        members = lot_data[7]
        now_bids = lot_data[9]
        max_user_bets = lot_data[11]

        user_bids_count = members.split(',').count(f'{call.message.chat.id}')

        if now_bids >= total_bids:
            return await call.answer('–£–∂–µ –∑–∞–Ω—è—Ç—ã –≤—Å–µ –º–µ—Å—Ç–∞', show_alert=True)

        if user_bids_count >= max_user_bets:
            return await call.answer('–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑', show_alert=True)

        if one_bid_price > user_balance:
            return await call.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥–∞–Ω–Ω–æ–º –†–æ–∑—ã–≥—Ä—ã—à–µ , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å',
                                             reply_markup=keyboards.top_up)

        if user_level < need_level:
            return await call.answer(f'–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å {need_level}.', show_alert=True)

        # add_user_lot(lot_id, call.message.chat.id)
        db.successful_bid(call.message.chat.id, lot_id, one_bid_price)
        db.add_spent_balance(call.message.chat.id, one_bid_price)

        if user_bids_count == 0:
            db.user_add_participation(call.message.chat.id)

        await call.answer('–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–≤–∏–µ')

        if call.message.chat.id in ADMIN_IDS:
            is_admin = True
        else:
            is_admin = False

        try:
            await call.message.edit_caption(caption=lot_text(name, description, one_bid_price, now_bids+1, total_bids, need_level, user_bids_count),
                                            reply_markup=keyboards.lot_keyboard(lot_id, is_admin=is_admin))
        except Exception as ex:
            print(ex)

        if now_bids + 1 >= total_bids:
            m = await bot.send_photo(ADMIN_CHANNEL_ID, image, caption=f'''
–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ {name} –≤—Å–µ –º–µ—Å—Ç–∞ –≤—ã–∫—É–ø–ª–µ–Ω—ã. –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
            ''', reply_markup=keyboards.lot_choose_winner_method(lot_id))
            db.update_winner_post_id(lot_id, m.message_id)

    elif call.data.startswith('channel_take_part_in_'):
        lot_id = call.data.split('channel_take_part_in_', maxsplit=1)[1]

        lot_data = db.get_lot_data(lot_id)

        name = lot_data[1]
        description = lot_data[2]
        one_bid_price = lot_data[3]
        total_bids = lot_data[4]
        need_level = lot_data[5]
        members = lot_data[7]
        image = lot_data[6]
        now_bids = lot_data[9]

        user_bids_count = members.split(',').count(f'{call.from_user.id}')

        caption = lot_text(name, description, one_bid_price, now_bids, total_bids, need_level, user_bids_count)

        if call.from_user.id in ADMIN_IDS:
            is_admin = True
        else:
            is_admin = False

        await call.answer('–ë–æ—Ç @ylionbot –æ—Ç–ø—Ä–∞–≤–∏–ª –í–∞–º –ª–æ—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ¬ª', show_alert=True)
        try:
            await bot.send_photo(call.from_user.id, image, caption, reply_markup=keyboards.lot_keyboard(lot_id, is_admin=is_admin))
        except:
            pass

    elif call.data == 'top_up':
        await UserTopUp.get_amount.set()
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å–≤–æ –º–æ–Ω–µ—Ç —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å',
                                  reply_markup=keyboards.cancel_keyboard)

    elif call.data == 'withdrawal':
        is_non_limit = db.is_non_limit_user(call.message.chat.id)

        if not is_non_limit:
            last_withdrawal_date = db.get_last_withdrawal_date(call.message.chat.id)

            if last_withdrawal_date:
                last_withdrawal_date = datetime.strptime(last_withdrawal_date[-1][0], '%Y-%m-%d %H:%M:%S.%f')

                user_level = db.get_user_level(call.message.chat.id)

                if user_level <= 10:
                    period = 3
                elif user_level <= 25:
                    period = 2
                elif user_level <= 49:
                    period = 1
                elif user_level >= 50:
                    period = 0
                else:
                    period = 3

                if floor((datetime.now() - last_withdrawal_date).days) < period:
                    next_time_to_withdrawal = last_withdrawal_date + timedelta(days=period)

                    next_time_to_withdrawal_text = f'{next_time_to_withdrawal.day} {statistic_months[next_time_to_withdrawal.month]} {next_time_to_withdrawal.year} –≥–æ–¥–∞ {next_time_to_withdrawal.hour if next_time_to_withdrawal.hour >= 10 else f"0{next_time_to_withdrawal.hour}"}:{next_time_to_withdrawal.minute if next_time_to_withdrawal.minute >= 10 else f"0{next_time_to_withdrawal.minute}"} –ú–°–ö'

                    return await call.message.answer(f'–°–ª–µ–¥—É—é—â–∏–π –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω {next_time_to_withdrawal_text}')

        await UserWithdrawal.get_bank_name.set()
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –±–∞–Ω–∫–∞',
                                  reply_markup=keyboards.cancel_keyboard)

    elif call.data == 'withdrawal_G':
        await UserWithdrawalG.get_amount.set()
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ G –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏',
                                  reply_markup=keyboards.cancel_keyboard)

    elif call.data == 'back_to_list':
        await call.message.delete()
        await send_active_lots(call.message, 0)

    elif call.data == 'write_review':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ë–æ—Ç–µ', reply_markup=keyboards.cancel_keyboard)
        await UserWriteReview.get_text.set()

    elif call.data.startswith('duels'):
        if call.data == 'duels_registration':
            active_duels = db.get_active_users_duels(call.message.chat.id)

            if len(active_duels) >= 3:
                return await call.message.answer('–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π')

            try:
                await call.message.edit_reply_markup(reply_markup=None)
            except:
                pass

            await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID –≤ Standoff2', reply_markup=keyboards.cancel_keyboard)
            await UserDuelsRegistration.st_id.set()

        elif call.data == 'duels_list_select':
            await call.message.edit_reply_markup(reply_markup=keyboards.duels_bet_type)

        elif call.data == 'duels_list_free':
            await send_duels_list(call.message, 0, free=True)
        elif call.data == 'duels_list_paid':
            await send_duels_list(call.message, 0, free=False)

        elif call.data == 'duels_my':
            user_duels = db.get_user_duels(call.message.chat.id)

            if len(user_duels) == 0:
                return await call.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥—É—ç–ª–µ–π')

            await call.message.answer('–í–∞—à–∏ –¥—É—ç–ª–∏', reply_markup=keyboards.my_list_duels_keyboard(user_duels))

        elif call.data == 'duels_info':
            await call.message.answer('''
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ , –î—Ä—É–∑—å—è. 
–ó–¥–µ—Å—å –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –î—É—ç–ª–∏ ‚öîÔ∏è

–¢–∞–∫, –Ω–∞—á–Ω–µ–º . 
–î–ª—è –Ω–∞—á–∞–ª–∞ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–î–≠–£–õ–¨¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥—è –¥–∞–Ω–Ω—ã–µ , –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å –ø—Ä–æ—Å–∏—Ç –ë–æ—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ  –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –î—ç—É–ª–µ–π, –≥–¥–µ –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π , –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–∏—Ç —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã, —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞–º –∑–∞—è–≤–∫—É –Ω–∞ –∏–≥—Ä—É. 

–î–∞–ª—å—à–µ –≤—ã —Å–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –∏ –∏–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å !

–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã <b>–ù–ê–°–¢–û–Ø–¢–ï–õ–¨–ù–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—ã –∏ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞,</b> —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –≤—ã —Å–º–æ–≥–ª–∏ –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø—Ä–∞–≤–æ—Ç—É –≤ —Å–ª—É—á–∞–µ —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
–ü–æ—Å–ª–µ —Ç–æ–≥–æ , –∫–∞–∫ –í—ã —Å—ã–≥—Ä–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –±–æ—Ç—É , –∏ –≤–∏–¥–∏—Ç–µ 3 –∫–Ω–æ–ø–∫–∏:

-–Ø –≤—ã–∏–≥—Ä–∞–ª 
- –Ø –ø—Ä–æ–∏–≥—Ä–∞–ª 
- –ê–ø–µ–ª–ª—è—Ü–∏—è 

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Å—Ç–Ω–æ , –≤–µ–¥—å –ø–æ –∏—Ç–æ–≥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—è—Å–Ω–∏—Ç –ø—Ä–∞–≤–¥—É, –∞ –∑–∞ –æ–±–º–∞–Ω –í–∞—Å –∑–∞–±–∞–Ω—è—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ . –ê–ø–µ–ª–ª—è—Ü–∏—è- —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–∑–Ω–∞—á–∞—é—â–∞—è , —á—Ç–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –∏ –∏–º–µ–µ—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è ,—á—Ç–æ –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å –∏–≥—Ä–∞–ª–∏ —Å –ß–∏—Ç–∞–º–∏, –∏–ª–∏ –∂–µ –∏–≥—Ä–æ–∫ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ , –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞ 10% –∑–∞ –∫–∞–∂–¥—É—é –¥—É—ç–ª—å 

–ù–∞–¥–µ–µ–º—Å—è , —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è , –∂–µ–ª–∞–µ–º —É–¥–∞—á–Ω—ã—Ö –∏–≥—Ä ‚ù§Ô∏è

–í–∞—à GM YLION ‚úÖ
            ''', parse_mode='HTML')


    elif call.data.startswith('duel_list_free_page_'):
        page = int(call.data.split('duel_list_free_page_')[1])
        await send_duels_list(call.message, page, free=True)

    elif call.data.startswith('duel_list_paid_page_'):
        page = int(call.data.split('duel_list_paid_page_')[1])
        await send_duels_list(call.message, page, free=False)

    elif call.data.startswith('duel_info_'):
        duel_id = call.data.split('duel_info_', maxsplit=1)[1]
        duel_info = db.get_duel_info(duel_id)

        if not duel_info:
            return await call.answer('–î—É—ç–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)

        duel_id, user_first, user_second, bet, st_id, game_mode, st_rank, st_name, status, winnner = duel_info

        duel_text = f'''
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {game_mode}
–†–∞–Ω–≥: {st_rank}
–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ YC: {bet}
        '''

        await call.message.answer(duel_text, reply_markup=keyboards.duel_take_part_keyboard(duel_id))

    elif call.data.startswith('duel_take_part_'):
        duel_id = call.data.split('duel_take_part_', maxsplit=1)[1]
        status = db.get_duel_status(duel_id)
        duel_creator_id = db.get_duel_creator_id(duel_id)

        if duel_creator_id == call.message.chat.id:
            return await call.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–º –¥—É—ç–ª–µ')

        if status == 'wait':
            if db.get_duel_bet(duel_id) > db.get_user_balance(call.message.chat.id):
                return await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è', show_alert=True)

            if db.has_duel_request(duel_id, call.message.chat.id):
                return await call.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å', show_alert=True)

            await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID –≤ Standoff2', reply_markup=keyboards.cancel_keyboard)
            await state.update_data(duel_id=duel_id)
            await UserDuelTakePart.st_id.set()
        else:
            await call.answer('–≠—Ç–∞ –¥—É—ç–ª—å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞', show_alert=True)

    elif call.data.startswith('duel_my_info_'):
        duel_id = call.data.split('duel_my_info_', maxsplit=1)[1]
        duel_info = db.get_duel_info(duel_id)

        if not duel_info:
            return await call.answer('–î—É—ç–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)

        duel_id, user_first, user_second, bet, st_id, game_mode, st_rank, st_name, status, winnner = duel_info

        duel_text = f'''
–î—É—ç–ª—å #{duel_id}
ID –≤ Standoff2: {st_id}
–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {game_mode}
–í–∞—à –†–∞–Ω–≥: {st_rank}
–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ YC: {bet}
–ù–∏–∫ –≤ Standoff2: {st_name}

'''

        if status == 'wait':
            duel_text += 'üïô –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n'
            keyboard = keyboards.duel_cancel_keyboard(duel_id)
        elif status == 'progress':
            duel_opponent_id = db.duel_opponent_id(duel_id, call.message.chat.id)
            opponent_info = db.duel_player_info(duel_id, duel_opponent_id)
            st_id, st_rank, st_name = opponent_info
            st_name = db.filter_text_markdown(st_name)
            duel_text += f'''
–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:
{db.get_user_full_name(duel_opponent_id)}
ID –≤ Standoff2: {st_id}
–†–∞–Ω–≥: {st_rank}
–ù–∏–∫ –≤ Standoff2: {st_name}

'''

            duel_text += 'üïô –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –≤ –ø—Ä–æ–≥—Ä–µ—Å–µ–µ\n'
            keyboard = keyboards.duel_result_keyboard(duel_id, db.get_duel_bet(duel_id))
        elif status == 'end':
            duel_opponent_id = db.duel_opponent_id(duel_id, call.message.chat.id)
            opponent_info = db.duel_player_info(duel_id, duel_opponent_id)
            st_id, st_rank, st_name = opponent_info
            st_name = db.filter_text_markdown(st_name)

            duel_text += f'''
–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:
{db.get_user_full_name(duel_opponent_id)}
ID –≤ Standoff2: {st_id}
–†–∞–Ω–≥: {st_rank}
–ù–∏–∫ –≤ Standoff2: {st_name}

'''

            duel_text += 'üïô –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏: –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n'
            if winnner == user_first:
                duel_text += '–†–µ–∑—É–ª—å—Ç–∞—Ç: –≤—ã–∏–≥—Ä—ã—à'
            elif winnner == user_second:
                duel_text += '–†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–æ–∏–≥—Ä—ã—à'
            else:
                duel_text += '–†–µ–∑—É–ª—å—Ç–∞—Ç: –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–æ–∫'
            keyboard = None
        else:
            keyboard = None

        await call.message.answer(duel_text, parse_mode='Markdown', reply_markup=keyboard)

    elif call.data.startswith('duel_cancel_'):
        duel_id = call.data.split('duel_cancel_', maxsplit=1)[1]
        status = db.get_duel_status(duel_id)

        if status == 'wait':
            bet = db.get_duel_bet(duel_id)
            db.duel_cancel(duel_id)

            if bet:
                db.update_user_balance(call.message.chat.id, bet)

            try:
                await call.message.delete()
            except:
                pass

            await call.message.answer('–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞')

        else:
            await call.answer('–î—É—ç–ª—å —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.')

    elif call.data.startswith('duel_req_con_'):
        call_data = call.data.split('duel_req_con_', maxsplit=1)[1]
        duel_id, from_user_id = call_data.split('_', maxsplit=1)

        status = db.get_duel_status(duel_id)

        if status != 'wait':
            return await call.answer('–î—É—ç–ª—å —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞', show_alert=True)

        if db.get_duel_bet(duel_id) > db.get_user_balance(call.message.chat.id):
            return await call.answer('–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è', show_alert=True)

        db.duel_update_to_progress(duel_id, from_user_id)
        db.update_user_balance(from_user_id, -1*db.get_duel_bet(duel_id))

        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except:
            pass

        await call.answer('–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')

        opponent_info = db.duel_player_info(duel_id, from_user_id)
        st_id, st_rank, st_name = opponent_info
        st_name = db.filter_text_markdown(st_name)

        duel_text = f'''
–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:
{db.get_user_full_name(from_user_id)}
ID –≤ Standoff2: {st_id}
–†–∞–Ω–≥: {st_rank}
–ù–∏–∫ –≤ Standoff2: {st_name}
        '''

        await call.message.answer(duel_text, parse_mode='Markdown', reply_markup=keyboards.duel_result_keyboard(duel_id, db.get_duel_bet(duel_id)))

        opponent_info = db.duel_player_info(duel_id, call.message.chat.id)
        st_id, st_rank, st_name = opponent_info
        st_name = db.filter_text_markdown(st_name)

        duel_text = f'''
–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:
{db.get_user_full_name(call.message.chat.id)}
ID –≤ Standoff2: {st_id}
–†–∞–Ω–≥: {st_rank}
–ù–∏–∫ –≤ Standoff2: {st_name}
                '''
        try:
            await bot.send_message(from_user_id, f'''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –¥—É—ç–ª–∏ {db.get_duel_bet(duel_id)} YC | {db.get_duel_game_mode(duel_id)} –ø—Ä–∏–Ω—è—Ç–∞
{duel_text}
                ''', parse_mode='Markdown', reply_markup=keyboards.duel_result_keyboard(duel_id, db.get_duel_bet(duel_id)))
        except:
            pass

    elif call.data.startswith('duel_req_rej_'):
        call_data = call.data.split('duel_req_rej_', maxsplit=1)[1]
        duel_id, from_user_id = call_data.split('_', maxsplit=1)

        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except:
            pass

        await call.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')

        try:
            await bot.send_message(from_user_id, f'''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –¥—É—ç–ª–∏ {db.get_duel_bet(duel_id)} YC | {db.get_duel_game_mode(duel_id)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            ''')
        except:
            pass


    elif call.data.startswith('duel_res_win_') or call.data.startswith('duel_res_lose_'):

        call_data = call.data.split('duel_res_')[1]
        result, duel_id = call_data.split('_')

        status = db.get_duel_status(duel_id)
        if status != 'progress':
            return await call.answer('–î—É—ç–ª—å —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞')

        if result == 'win':
            result_text = '–í—ã–∏–≥—Ä—ã—à'
        elif result == 'lose':
            result_text = '–ü—Ä–æ–∏–≥—Ä—ã—à'

        await call.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç {result_text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        duel_opponent_id = db.duel_opponent_id(duel_id, call.message.chat.id)
        try:
            await bot.send_message(duel_opponent_id, f'–î—É—ç–ª—å #{duel_id}. –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}')
        except:
            pass

        db.duel_set_result(duel_id, call.message.chat.id, result)
        duel_result = db.duel_check_result(duel_id)

        if duel_result:
            winner = duel_result

            bet = db.get_duel_bet(duel_id)
            win_amount = 2*bet * 0.9

            db.duel_update_to_end(duel_id, winner)
            db.update_user_balance(winner, win_amount)

            try:
                await bot.send_message(winner, f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ #{duel_id}. –í–∞—à –≤—ã–∏–≥—Ä—ã—à {win_amount} YC')
            except:
                pass


async def on_startup(_):
    baned_users_list = db.get_baned_users()

    for user_id in baned_users_list:
        await storage.set_state(user=user_id, chat=user_id, state='ban')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
